#include <GL/glut.h>
#include <iostream>
#include <math.h>
using namespace std;

float rect_x1 = 100, rect_x2 = 300, rect_y1 = 100, rect_y2 = 300;
float angle = 45.0;  // Rotation angle in degrees
float cx = 200, cy = 200;  // Center point for rotation

void init(void)
{
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glPointSize(5.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 800, 0, 800);
}

// Function to rotate a point around center (cx, cy)
void rotatePoint(float x, float y, float &x_new, float &y_new)
{
    float radian = angle * M_PI / 180.0;

    float tx = x - cx;
    float ty = y - cy;

    x_new = tx * cos(radian) - ty * sin(radian) + cx;
    y_new = tx * sin(radian) + ty * cos(radian) + cy;
}

// Draw rotated rectangle using all 4 corners
void drawRotatedRectangle(float x1, float y1, float x2, float y2)
{
    float corners[4][2];

    // Calculate all 4 corners
    rotatePoint(x1, y1, corners[0][0], corners[0][1]);  // Bottom-left
    rotatePoint(x2, y1, corners[1][0], corners[1][1]);  // Bottom-right
    rotatePoint(x2, y2, corners[2][0], corners[2][1]);  // Top-right
    rotatePoint(x1, y2, corners[3][0], corners[3][1]);  // Top-left

    // Draw the rectangle
    glBegin(GL_LINE_LOOP);
    for(int i = 0; i < 4; i++) {
        glVertex2f(corners[i][0], corners[i][1]);
    }
    glEnd();
}

void rec(float x1, float y1, float x2, float y2)
{
    glBegin(GL_LINE_LOOP);
    glVertex2f(x1, y1);
    glVertex2f(x2, y1);
    glVertex2f(x2, y2);
    glVertex2f(x1, y2);
    glEnd();
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);

    // Original rectangle (red)
    glColor3f(1.0, 0.0, 0.0);
    rec(rect_x1, rect_y1, rect_x2, rect_y2);

    // Rotated rectangle (blue) - FULL RECTANGLE
    glColor3f(0.0, 0.0, 1.0);
    drawRotatedRectangle(rect_x1, rect_y1, rect_x2, rect_y2);

    glFlush();
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutInitWindowPosition(300, 0);
    glutCreateWindow("Full Rectangle Rotation");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
